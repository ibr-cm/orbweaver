#!/usr/bin/python3

import argparse
import os
import sys
import subprocess
from xml.etree import ElementTree as et
from xml.dom import minidom
import re
from string import ascii_uppercase
import itertools
import math
import string

directions = ["clock", "counterclock"]

def removeWhitespace(xmlTree, outfileName):
    xmlTree.write(outfileName)

def cleanupNetFile(filename):
    # There are some bogus connections left from removing edges
    # NETCONVERT can be used to remove them automatically
    try:
        subprocess.run([sumo_path + "netconvert",
                        "-s",
                        filename,
                        "-o",
                        filename],
                        check=True)
    except subprocess.CalledProcessError as e:
        print(str(e))
        exit(1)

def removeArms(xmlTree, outfileName):
    xmlRoot = xmlTree.getroot()

    removedEdges = []
    removedLanes = []

    for edge in xmlRoot.findall('edge'):
        edgeId = str(edge.get('id'))

        # "Arm" edges connecting two circles 'A' and 'B' are called A1B1 for example
        # Those will be removed now
        match = re.match(r"([A-Z]+)[0-9]+([A-Z]+)[0-9]+", edgeId)
        if match != None:
            incoming = match.group(1)
            outgoing = match.group(2)
            if incoming != outgoing:
                lanes = edge.findall('lane')
                for lane in lanes:
                    laneId = str(lane.get('id'))
                    removedLanes.append(laneId)

                xmlRoot.remove(edge)
                removedEdges.append(edgeId)

    for connection in xmlRoot.findall('connection'):
        connFrom = str(connection.get('from'))
        connTo = str(connection.get('to'))

        if (connFrom in removedEdges) or (connTo in removedEdges):
            xmlRoot.remove(connection)

    xmlTree.write(outfileName)
    cleanupNetFile(outfileName)

def getCircleNames(config):
    numLetters = math.ceil(config.c / 26)
    combinations = itertools.product(ascii_uppercase, repeat=numLetters)

    circles = ["".join(c) for c in combinations]

    # Circle AA, AAA, ... are not is not generated by SUMO, so the first combination is removed
    # We also don't necessaily need all circles => discard useless ones at the end
    circles = circles[1:config.c + 1]

    return circles

def generateRerouters(circles, config, endTime):
    additionals = et.Element('additionals')

    for circle in circles:

        edges = [
                [circle + "1" + circle + str(config.a),
                 circle + "2" + circle + "1"],
                [circle + "1" + circle + "2",
                 circle + str(config.a) + circle + "1"]
                ]

        for i,dir in enumerate(directions):
            rrIdsC = ["rr0_circle-" + str(circle) + "_" + dir,
                      "rr1_circle-" + str(circle) + "_" + dir]

            e = edges[i]

            rerouter = et.SubElement(additionals, 'rerouter', attrib={'id':rrIdsC[0], 'edges':e[0]})
            interval = et.SubElement(rerouter, 'interval', attrib={'end':str(endTime)})
            et.SubElement(interval, 'destProbReroute', attrib={'id':e[1]})

            rerouter = et.SubElement(additionals, 'rerouter', attrib={'id':rrIdsC[1], 'edges':e[1]})
            interval = et.SubElement(rerouter, 'interval', attrib={'end':str(endTime)})
            et.SubElement(interval, 'destProbReroute', attrib={'id':e[0]})

    # Use minidom to generate pretty printed XML which ET can't
    xmlString = minidom.parseString(et.tostring(additionals)).toprettyxml(indent="   ")
    with open(config.o + ".add.xml", "w") as f:
        f.write(xmlString)

def generateSumoConfig(config, warmupTime):
    cfg = et.Element('configuration')
    inputElem = et.SubElement(cfg, 'input')

    et.SubElement(inputElem, 'net-file', attrib={'value':str(config.o + '.net.xml')})
    et.SubElement(inputElem, 'route-files', attrib={'value':str(config.o + '.rou.xml')})
    et.SubElement(inputElem, 'additional-files', attrib={'value':str(config.o + '.add.xml')})

    timeElem = et.SubElement(cfg, 'time')
    et.SubElement(timeElem, 'step-length').text = str(config.sumo_step_length)
    et.SubElement(timeElem, 'end').text = str(config.scenario_duration + warmupTime)

    # Use minidom to generate pretty printed XML which ET can't
    xmlString = minidom.parseString(et.tostring(cfg)).toprettyxml(indent="   ")
    with open(config.o + ".sumocfg", "w") as f:
        f.write(xmlString)

def generateTraffic(config):
    routes = et.Element('routes')
    et.SubElement(routes, 'vType',  attrib={'id':'car', 'type':'passenger', 'color':'yellow', 'guiShape':'passenger', 'length':str(config.vehicle_length), 'accel':'10', 'decel':'10', 'speedDev':'0', 'speedFactor':'1.0', 'sigma':'0', 'minGap':'0', 'tau':'0.01'})

    additionals = et.Element('additionals')

    circles = getCircleNames(config)
    for circleNumber,circle in enumerate(circles):
        print("Circle number: %d" % (circleNumber))

        numEdges = config.a

        innerRadius = (circleNumber + 1) * config.d - (config.lane_width / 2)
        outerRadius = (circleNumber + 1) * config.d + (config.lane_width / 2)

        innerLaneLength_m = 2 * innerRadius * math.sin(math.pi / numEdges)
        outerLaneLength_m = 2 * outerRadius * math.sin(math.pi / numEdges)

        innerCircleLength_m = numEdges * innerLaneLength_m
        outerCircleLength_m = numEdges * outerLaneLength_m

        innerCircleLength_km = innerCircleLength_m / 1000
        outerCircleLength_km = outerCircleLength_m / 1000

        print("\tinnerCircleLength_m = %f" % innerCircleLength_m)
        print("\touterCircleLength_m = %f\n" % outerCircleLength_m)

        # Both rings should have the same number of vehicles and there is less space on the inner ring so we use that
        numVehicles = round(config.vehicle_density * innerCircleLength_km)

        timeForInnerCircle = innerCircleLength_m / config.v
        timeForOuterCircle = outerCircleLength_m / config.v

        print("\ttimeForInnerCircle = %f" % timeForInnerCircle)
        print("\ttimeForOuterCircle = %f\n" % timeForOuterCircle)

        innerSpawnPeriod = (timeForInnerCircle / numVehicles)
        innerSpawnPeriod_rounded = round(innerSpawnPeriod * 100) / 100
        outerSpawnPeriod = (timeForOuterCircle / numVehicles)
        outerSpawnPeriod_rounded = round(outerSpawnPeriod * 100) / 100

        innerError = abs(innerSpawnPeriod - innerSpawnPeriod_rounded)
        lastGap = innerError * numVehicles

        print("roundedSpawnPeriod = %f" % innerSpawnPeriod_rounded)
        print("\tlast gap is %f times the size of the other gaps due to a lack of FP precision\n" % (lastGap / innerSpawnPeriod))

        print("\tinnerSpawnPeriod = %f" % innerSpawnPeriod)
        print("\touterSpawnPeriod = %f\n" % outerSpawnPeriod)

        minInterVehicleGap = innerSpawnPeriod - (config.vehicle_length / config.v)
        print("\tminInterVehicleGap = %f\n" % minInterVehicleGap)

        if(minInterVehicleGap < config.min_vehicle_gap):
            print("\tWarning: Vehicle gap with set vehicle density is smaller than driver model allows!")

        print("\tinner: %s vehicles generated => vehicle density = %f" % (numVehicles, (numVehicles / innerCircleLength_km)))
        print("\touter: %s vehicles generated => vehicle density = %f\n" % (numVehicles, (numVehicles / outerCircleLength_km)))

        idC = "%s-%s" % (circle, directions[0])
        idCC = "%s-%s" % (circle, directions[1])

        startC = circle + "1" + circle + str(config.a)
        endC = circle + "2" + circle + "1"

        startCC = circle + "1" + circle + "2"
        endCC = circle + str(config.a) + circle + "1"

        et.SubElement(routes, 'flow', attrib={'id':idC, 'type':'car', 'beg':'0', 'number':str(numVehicles), 'period':str(innerSpawnPeriod), 'from':startC, 'to':endC, 'departSpeed':'speedLimit'})
        et.SubElement(routes, 'flow', attrib={'id':idCC, 'type':'car', 'beg':'0', 'number':str(numVehicles), 'period':str(outerSpawnPeriod), 'from':startCC, 'to':endCC, 'departSpeed':'speedLimit'})

    xmlString = minidom.parseString(et.tostring(routes)).toprettyxml(indent="   ")
    with open(config.o + ".rou.xml", "w") as f:
        f.write(xmlString)

    generateRerouters(circles, config, timeForOuterCircle + config.scenario_duration)

    return timeForOuterCircle

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Generates SUMO spider scenario for network load evaluation.")
    parser.add_argument("-o", help="Name of scenario", required=True)
    parser.add_argument("-c", type=int, help="Number of circles", required=True)
    parser.add_argument("-d", type=int, help="Distance between circles", required=True)
    parser.add_argument("-a", type=int, help="Number of arms", default=16)
    parser.add_argument("-r", type=int, help="Departure rate of vehicles per second (0 spawns vehicles as fast as possible)", default=0)
    parser.add_argument("-v", type=int, help="Velocity of vehicles in m/s", default=42.0)
    parser.add_argument("--vehicle-density", type=float, help="Number of vehicles per km", default=5.0)
    parser.add_argument("--vehicle-length", type=float, help="Length of vehicles in m", default=5)
    parser.add_argument("--min-vehicle-gap", type=float, help="Minimum gap between two vehicles in s", default=0.001)
    parser.add_argument("--scenario-duration", type=int, help="Duration of traffic flows in s", default=200)
    parser.add_argument("--sumo-step-length", type=float, help="SUMO's step length in s", default=0.01)
    parser.add_argument("--lane-width", type=float, help="Width of lanes in m", default=3.2)

    configuration = parser.parse_args()

    outfileName = configuration.o + ".net.xml"

    try:
        sumo_path = os.environ["SUMO_HOME"] + "/bin/"
    except KeyError:
        print("SUMO_HOME not set in this evironment", file=sys.stderr)
        exit(1)

    # generate basic NET file
    try:
        subprocess.run([sumo_path + "netgenerate",
                            "--spider",
                            "--spider.omit-center",
                            "--spider.arm-number=" + str(configuration.a),
                            "--spider.circle-number=" + str(configuration.c),
                            "--spider.space-radius=" + str(configuration.d),
                            "--no-turnarounds",
                            "--default.speed=" + str(configuration.v),
                            "--junctions.limit-turn-speed=0",
                            "--output-file=" + outfileName],
                            check=True)
    except subprocess.CalledProcessError as e:
        print(str(e))
        exit(1)

    xmlTree = et.parse(outfileName)
    removeArms(xmlTree, outfileName)
    warmupTime = generateTraffic(configuration)
    print("warmup = %f" % warmupTime)
    generateSumoConfig(configuration, warmupTime)
